#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import freesurfer
import nibabel
import getopt

import VTPUtils
import GraphUtils
import pandas

opts, args = getopt.getopt(sys.argv[1:], "vh", ['surf-volgeom='])

if len(args) != 3:
    print("The number of arguments must be 2")
    print((sys.argv[0] + " <subjectid> <hemi> <atlas>"))
    exit()

subjID = args[0]
Hemi = args[1]
Atlas = args[2]

SubjectsDir = 'freesurfer'
inDir = os.path.join('SurfReconDeformable', subjID)
PialSurf = VTPUtils.readVTPSurf(os.path.join(inDir, 'meshes', 'pial-' + Hemi + '-reordered.vtp'))
OuterSurf = VTPUtils.readVTPSurf(os.path.join(inDir, 'meshes', 'correspondence-' + Hemi + '-reordered.vtp_warpedMesh.vtp'))
AnnotFileName = os.path.join(SubjectsDir, subjID, 'label', Hemi + "." + Atlas + ".annot")
Annot = freesurfer.readAnnot(AnnotFileName)

print("Annot:")
print(Annot)

CortexLabel = freesurfer.readLabel(os.path.join(SubjectsDir, subjID, 'label', Hemi + ".cortex.label"))

PialFaceNormals, PialFaceAreas, PialVertexNormals, PialVertexAreas = GraphUtils.surfaceAreasNormals(PialSurf)
OuterFaceNormals, OuterFaceAreas, OuterVertexNormals, OuterVertexAreas = GraphUtils.surfaceAreasNormals(OuterSurf)

outDF = pandas.DataFrame(columns = ['StructName', 'LGI', 'SurfArea', 'OuterSurfArea'])
outDF.StructName = Annot['colortable']['struct_names']

print("outDF after initialization and calling Annot colortable struct names")
print(outDF)

outDF = outDF[outDF.StructName != 'ctx-' + Hemi + '-unknown']
outDF = outDF[outDF.StructName != 'unknown']

print("outDF after replacement")
print(outDF)

pd = pandas.DataFrame(columns = outDF.columns)
print("Columns of outDF")
print(outDF.columns)
print("pd initial")
print(pd)
pd['StructName'] = pandas.Series('Global')
print("pd after reassignment of structname to global")
print(pd)
pd = dict.fromkeys(outDF.columns.values, numpy.nan)
print("names of outDF columns?")
print(outDF.columns.names)

print("pd after initialization, assignment, and conversion")
print(pd)

outDF = outDF.append(pd, ignore_index = True)
outDF.loc[35, 'StructName'] = 'Global'

print("outDF with pd appended (the < error line)")
print(outDF)

structsAndLabels = pandas.Series(index = Annot['colortable']['struct_names'], data = Annot['colortable']['labels'])

print("structsAndLabels?")
print(structsAndLabels)

for curStructIDX in list(range(34)):
    print("curStructIDX")
    print(curStructIDX)
    curStructName = outDF.loc[curStructIDX, 'StructName']
    print("curStructName")
    print(curStructName)
    print("Annot['label']")
    print(Annot['label'])
    print("structsAndLabels.loc[curStructName]")
    print(structsAndLabels.loc[curStructName])
    I = numpy.where(Annot['label'] == structsAndLabels.loc[curStructName])[0]

    outDF.loc[curStructIDX, 'SurfArea'] = numpy.sum(PialVertexAreas[I])
    outDF.loc[curStructIDX, 'OuterSurfArea'] = numpy.sum(OuterVertexAreas[I])
    outDF.loc[curStructIDX, 'LGI'] = outDF.loc[curStructIDX, 'SurfArea'] / outDF.loc[curStructIDX, 'OuterSurfArea']

outDF.loc['Global', 'SurfArea'] = numpy.sum(PialVertexAreas[CortexLabel[index]])
outDF.loc['Global', 'OuterSurfArea'] = numpy.sum(OuterVertexAreas[CortexLabel[index]])
outDF.loc['Global', 'LGI'] = outDF.loc['Global', 'SurfArea'] / outDF.loc['Global', 'OuterSurfArea']

outDF.to_csv(os.path.join(SubjectsDir, subjID, 'stats', Hemi + "." + Atlas + ".lgi.stats"), index = False)

